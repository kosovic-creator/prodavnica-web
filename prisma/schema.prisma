// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]

}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")

}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String
  role              String      @default("user")
  name              String?
  image             String?
  emailVerified     Boolean     @default(false)
  emailVerifyToken  String?     @unique
  emailVerifyExpiry DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  cartItems         CartItem[]
  orders            Order[]
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Float
  image      String?
  description String?
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model Order {
  id             String      @id @default(uuid())
  userId         String
  total          Float
  status         String
  email          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  paymentIntentId String?     @unique

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float    // Cena u vreme kupovine
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model ProductDetail {
  id          String   @id @default(uuid())
  description String
  price       Float
  image       String?
}
